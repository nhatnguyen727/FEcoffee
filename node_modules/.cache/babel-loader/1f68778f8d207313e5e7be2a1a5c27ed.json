{"ast":null,"code":"var _jsxFileName = \"/home/nhatnt/TN/FEcoffee/src/client/components/app-context/UserProvider.jsx\",\n    _s = $RefreshSig$(),\n    _s2 = $RefreshSig$();\n\nimport { useContext, createContext, useState, useEffect, useCallback } from 'react';\nimport { SERVER_URL } from '../../constants';\nimport { useHistory } from 'react-router-dom';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst UserContext = /*#__PURE__*/createContext();\nexport const useUser = () => {\n  _s();\n\n  return useContext(UserContext);\n};\n\n_s(useUser, \"gDsCjeeItUuvgOWf1v4qoK9RF6k=\");\n\nfunction UserProvider({\n  children\n}) {\n  _s2();\n\n  const history = useHistory();\n  const [user, setUser] = useState({\n    username: '',\n    password: ''\n  });\n  const [userLoading, setUserLoading] = useState(false);\n  const [attempRegister, setAttempRegister] = useState(false);\n  const [errorMsg, setErrorMsg] = useState();\n\n  const signUp = userInfo => {\n    setUserLoading(true);\n    setUser({\n      username: userInfo.username,\n      password: userInfo.password\n    });\n    fetch(SERVER_URL + '/user/register', {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify(userInfo)\n    }).then(response => {\n      if (response.status === 409) {\n        return response.text();\n      }\n    }).then(setErrorMsg).then(() => setAttempRegister(true)).then(() => setUserLoading(false));\n  };\n\n  const login = useCallback(userInfo => {\n    setUserLoading(true);\n    fetch(SERVER_URL + '/login', {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify(userInfo)\n    }).then(response => {\n      if (response.status !== 200) {\n        setErrorMsg('Username or password is incorrect!');\n        return null;\n      }\n\n      sessionStorage.setItem('starbucks-jwt', response.headers.get('Authorization'));\n      return response.json();\n    }) // 'user' is returned from the previous the promise 'response.json()'... we can name it whatever we want\n    .then(user => {\n      if (user !== null) {\n        sessionStorage.setItem('starbucks-member', JSON.stringify(user));\n        history.push('');\n      }\n    }).then(() => setUserLoading(false));\n  }, [history]);\n  useEffect(() => {\n    if (attempRegister) {\n      if (errorMsg === undefined) {\n        login(user);\n      }\n\n      setAttempRegister(false);\n    }\n  }, [attempRegister, errorMsg, login, user]);\n\n  const logout = () => {\n    sessionStorage.removeItem('starbucks-jwt');\n    sessionStorage.removeItem('starbucks-member');\n    history.push('');\n  };\n\n  const resetErrorMsg = () => {\n    setErrorMsg(); // set back to undefined (no errors)\n  };\n\n  return /*#__PURE__*/_jsxDEV(UserContext.Provider, {\n    value: {\n      signUp,\n      login,\n      logout,\n      userLoading,\n      errorMsg,\n      resetErrorMsg\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 81,\n    columnNumber: 9\n  }, this);\n}\n\n_s2(UserProvider, \"pNsmvNkgXYvQkDQDOMI5NdHHQew=\", false, function () {\n  return [useHistory];\n});\n\n_c = UserProvider;\nexport default UserProvider;\n\nvar _c;\n\n$RefreshReg$(_c, \"UserProvider\");","map":{"version":3,"sources":["/home/nhatnt/TN/FEcoffee/src/client/components/app-context/UserProvider.jsx"],"names":["useContext","createContext","useState","useEffect","useCallback","SERVER_URL","useHistory","UserContext","useUser","UserProvider","children","history","user","setUser","username","password","userLoading","setUserLoading","attempRegister","setAttempRegister","errorMsg","setErrorMsg","signUp","userInfo","fetch","method","headers","body","JSON","stringify","then","response","status","text","login","sessionStorage","setItem","get","json","push","undefined","logout","removeItem","resetErrorMsg"],"mappings":"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","sourcesContent":["import { useContext, createContext, useState, useEffect, useCallback } from 'react';\nimport { SERVER_URL } from '../../constants';\nimport { useHistory } from 'react-router-dom';\n\nconst UserContext = createContext();\n\nexport const useUser = () => useContext(UserContext);\n\nfunction UserProvider({ children }) {\n\tconst history = useHistory();\n\tconst [user, setUser] = useState({ username: '', password: '' });\n\tconst [userLoading, setUserLoading] = useState(false);\n\tconst [attempRegister, setAttempRegister] = useState(false);\n\tconst [errorMsg, setErrorMsg] = useState();\n\n\tconst signUp = (userInfo) => {\n\t\tsetUserLoading(true);\n\t\tsetUser({ username: userInfo.username, password: userInfo.password });\n\t\tfetch(SERVER_URL + '/user/register', {\n\t\t\tmethod: 'POST',\n\t\t\theaders: { 'Content-Type': 'application/json' },\n\t\t\tbody: JSON.stringify(userInfo),\n\t\t})\n\t\t\t.then((response) => {\n\t\t\t\tif (response.status === 409) {\n\t\t\t\t\treturn response.text();\n\t\t\t\t}\n\t\t\t})\n\t\t\t.then(setErrorMsg)\n\t\t\t.then(() => setAttempRegister(true))\n\t\t\t.then(() => setUserLoading(false));\n\t};\n\n\tconst login = useCallback(\n\t\t(userInfo) => {\n\t\t\tsetUserLoading(true);\n\t\t\tfetch(SERVER_URL + '/login', {\n\t\t\t\tmethod: 'POST',\n\t\t\t\theaders: { 'Content-Type': 'application/json' },\n\t\t\t\tbody: JSON.stringify(userInfo),\n\t\t\t})\n\t\t\t\t.then((response) => {\n\t\t\t\t\tif (response.status !== 200) {\n\t\t\t\t\t\tsetErrorMsg('Username or password is incorrect!');\n\t\t\t\t\t\treturn null;\n\t\t\t\t\t}\n\t\t\t\t\tsessionStorage.setItem('starbucks-jwt', response.headers.get('Authorization'));\n\t\t\t\t\treturn response.json();\n\t\t\t\t})\n\t\t\t\t// 'user' is returned from the previous the promise 'response.json()'... we can name it whatever we want\n\t\t\t\t.then((user) => {\n\t\t\t\t\tif (user !== null) {\n\t\t\t\t\t\tsessionStorage.setItem('starbucks-member', JSON.stringify(user));\n\t\t\t\t\t\thistory.push('');\n\t\t\t\t\t}\n\t\t\t\t})\n\t\t\t\t.then(() => setUserLoading(false));\n\t\t},\n\t\t[history]\n\t);\n\n\tuseEffect(() => {\n\t\tif (attempRegister) {\n\t\t\tif (errorMsg === undefined) {\n\t\t\t\tlogin(user);\n\t\t\t}\n\t\t\tsetAttempRegister(false);\n\t\t}\n\t}, [attempRegister, errorMsg, login, user]);\n\n\tconst logout = () => {\n\t\tsessionStorage.removeItem('starbucks-jwt');\n\t\tsessionStorage.removeItem('starbucks-member');\n\t\thistory.push('');\n\t};\n\n\tconst resetErrorMsg = () => {\n\t\tsetErrorMsg(); // set back to undefined (no errors)\n\t};\n\n\treturn <UserContext.Provider value={{ signUp, login, logout, userLoading, errorMsg, resetErrorMsg }}>{children}</UserContext.Provider>;\n}\n\nexport default UserProvider;\n"]},"metadata":{},"sourceType":"module"}