{"ast":null,"code":"var _jsxFileName = \"/home/nhatnt/TN/FEcoffee/src/client/components/app-context/ProfileProvider.jsx\",\n    _s = $RefreshSig$(),\n    _s2 = $RefreshSig$();\n\nimport { useContext, createContext, useState, useMemo, useEffect } from 'react';\nimport { SERVER_URL } from '../../constants';\nimport { useUser } from './UserProvider';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ProfileContext = /*#__PURE__*/createContext();\nexport const useProfile = () => {\n  _s();\n\n  return useContext(ProfileContext);\n};\n\n_s(useProfile, \"gDsCjeeItUuvgOWf1v4qoK9RF6k=\");\n\nfunction ProfileProvider({\n  children\n}) {\n  _s2();\n\n  const {\n    logout\n  } = useUser();\n  const [profile, setProfile] = useState();\n  const [passwordChanged, setPasswordChanged] = useState(false);\n  const [dataSaved, setDataSaved] = useState(false);\n  const [profileLoading, setProfileLoading] = useState(false);\n  const [errorMsg, setErrorMsg] = useState(); // first loading\n\n  useMemo(() => {\n    if (sessionStorage.getItem('starbucks-member') === null) {\n      return;\n    }\n\n    setProfileLoading(true);\n    let token = sessionStorage.getItem('starbucks-jwt');\n    let username = JSON.parse(sessionStorage.getItem('starbucks-member')).username;\n    fetch(SERVER_URL + `/user/username=${username}`, {\n      headers: {\n        Authorization: token\n      }\n    }).then(response => response.json()).then(setProfile).then(() => setProfileLoading(false));\n  }, []);\n\n  const handleChange = (fieldName, value) => {\n    setProfile({ ...profile,\n      [fieldName]: value\n    });\n\n    if (fieldName === 'password') {\n      setPasswordChanged(true);\n    }\n  };\n\n  const updateUser = user => {\n    setProfileLoading(true);\n    let token = sessionStorage.getItem('starbucks-jwt');\n    fetch(SERVER_URL + `/user/${user.id}`, {\n      method: 'PUT',\n      headers: {\n        'Content-Type': 'application/json',\n        Authorization: token\n      },\n      body: JSON.stringify(user)\n    }).then(response => {\n      // 403 forbidden (validation)\n      if (response.status === 403) {\n        return response.text();\n      } else {\n        // for updating new current user to the outside (photo and fullname displayed in the the side menu or on the header)\n        sessionStorage.setItem('starbucks-member', JSON.stringify(user));\n      }\n    }).then(setErrorMsg).then(() => setDataSaved(true)).then(() => setProfileLoading(false));\n  };\n\n  const setErrorMsgContent = value => {\n    setErrorMsg(value); // set message content or we can set back to undefined (no errors)\n  };\n\n  useEffect(() => {\n    if (dataSaved && errorMsg === undefined) {\n      if (passwordChanged) {\n        logout();\n      }\n    }\n  }, [passwordChanged, dataSaved, errorMsg, logout]);\n  useEffect(() => {\n    if (dataSaved) {\n      setDataSaved(false); // set back to 'false'\n    }\n  }, [dataSaved]);\n  return /*#__PURE__*/_jsxDEV(ProfileContext.Provider, {\n    value: {\n      profile,\n      handleChange,\n      updateUser,\n      profileLoading,\n      errorMsg,\n      setErrorMsgContent\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 84,\n    columnNumber: 3\n  }, this);\n}\n\n_s2(ProfileProvider, \"QpKBbcJrrHYZ6q+O0VoWNLbUtdc=\", false, function () {\n  return [useUser];\n});\n\n_c = ProfileProvider;\nexport default ProfileProvider;\n\nvar _c;\n\n$RefreshReg$(_c, \"ProfileProvider\");","map":{"version":3,"sources":["/home/nhatnt/TN/FEcoffee/src/client/components/app-context/ProfileProvider.jsx"],"names":["useContext","createContext","useState","useMemo","useEffect","SERVER_URL","useUser","ProfileContext","useProfile","ProfileProvider","children","logout","profile","setProfile","passwordChanged","setPasswordChanged","dataSaved","setDataSaved","profileLoading","setProfileLoading","errorMsg","setErrorMsg","sessionStorage","getItem","token","username","JSON","parse","fetch","headers","Authorization","then","response","json","handleChange","fieldName","value","updateUser","user","id","method","body","stringify","status","text","setItem","setErrorMsgContent","undefined"],"mappings":"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","sourcesContent":["import { useContext, createContext, useState, useMemo, useEffect } from 'react';\nimport { SERVER_URL } from '../../constants';\nimport { useUser } from './UserProvider';\n\nconst ProfileContext = createContext();\n\nexport const useProfile = () => useContext(ProfileContext);\n\nfunction ProfileProvider({ children }) {\n\tconst { logout } = useUser();\n\tconst [profile, setProfile] = useState();\n\tconst [passwordChanged, setPasswordChanged] = useState(false);\n\tconst [dataSaved, setDataSaved] = useState(false);\n\tconst [profileLoading, setProfileLoading] = useState(false);\n\tconst [errorMsg, setErrorMsg] = useState();\n\n\t// first loading\n\tuseMemo(() => {\n\t\tif (sessionStorage.getItem('starbucks-member') === null) {\n\t\t\treturn;\n\t\t}\n\t\tsetProfileLoading(true);\n\t\tlet token = sessionStorage.getItem('starbucks-jwt');\n\t\tlet username = JSON.parse(sessionStorage.getItem('starbucks-member')).username;\n\t\tfetch(SERVER_URL + `/user/username=${username}`, {\n\t\t\theaders: { Authorization: token },\n\t\t})\n\t\t\t.then((response) => response.json())\n\t\t\t.then(setProfile)\n\t\t\t.then(() => setProfileLoading(false));\n\t}, []);\n\n\tconst handleChange = (fieldName, value) => {\n\t\tsetProfile({ ...profile, [fieldName]: value });\n\t\tif (fieldName === 'password') {\n\t\t\tsetPasswordChanged(true);\n\t\t}\n\t};\n\n\tconst updateUser = (user) => {\n\t\tsetProfileLoading(true);\n\t\tlet token = sessionStorage.getItem('starbucks-jwt');\n\t\tfetch(SERVER_URL + `/user/${user.id}`, {\n\t\t\tmethod: 'PUT',\n\t\t\theaders: {\n\t\t\t\t'Content-Type': 'application/json',\n\t\t\t\tAuthorization: token,\n\t\t\t},\n\t\t\tbody: JSON.stringify(user),\n\t\t})\n\t\t\t.then((response) => {\n\t\t\t\t// 403 forbidden (validation)\n\t\t\t\tif (response.status === 403) {\n\t\t\t\t\treturn response.text();\n\t\t\t\t} else {\n\t\t\t\t\t// for updating new current user to the outside (photo and fullname displayed in the the side menu or on the header)\n\t\t\t\t\tsessionStorage.setItem('starbucks-member', JSON.stringify(user));\n\t\t\t\t}\n\t\t\t})\n\t\t\t.then(setErrorMsg)\n\t\t\t.then(() => setDataSaved(true))\n\t\t\t.then(() => setProfileLoading(false));\n\t};\n\n\tconst setErrorMsgContent = (value) => {\n\t\tsetErrorMsg(value); // set message content or we can set back to undefined (no errors)\n\t};\n\n\tuseEffect(() => {\n\t\tif (dataSaved && errorMsg === undefined) {\n\t\t\tif (passwordChanged) {\n\t\t\t\tlogout();\n\t\t\t}\n\t\t}\n\t}, [passwordChanged, dataSaved, errorMsg, logout]);\n\n\tuseEffect(() => {\n\t\tif (dataSaved) {\n\t\t\tsetDataSaved(false); // set back to 'false'\n\t\t}\n\t}, [dataSaved]);\n\n\treturn (\n\t\t<ProfileContext.Provider value={{ profile, handleChange, updateUser, profileLoading, errorMsg, setErrorMsgContent }}>\n\t\t\t{children}\n\t\t</ProfileContext.Provider>\n\t);\n}\n\nexport default ProfileProvider;\n"]},"metadata":{},"sourceType":"module"}