{"ast":null,"code":"var _jsxFileName = \"/home/nhatnt/TN/FEcoffee/src/components/react-table/EnhancedTable.js\",\n    _s = $RefreshSig$(),\n    _s2 = $RefreshSig$(),\n    _s3 = $RefreshSig$();\n\nimport React from 'react';\nimport Checkbox from '@material-ui/core/Checkbox';\nimport MaUTable from '@material-ui/core/Table';\nimport PropTypes from 'prop-types';\nimport TableBody from '@material-ui/core/TableBody';\nimport TableCell from '@material-ui/core/TableCell';\nimport TableContainer from '@material-ui/core/TableContainer';\nimport TableFooter from '@material-ui/core/TableFooter';\nimport TableHead from '@material-ui/core/TableHead';\nimport TablePagination from '@material-ui/core/TablePagination';\nimport TablePaginationActions from './TablePaginationActions';\nimport TableRow from '@material-ui/core/TableRow';\nimport TableSortLabel from '@material-ui/core/TableSortLabel';\nimport TableToolbar from './TableToolbar';\nimport Snackbar from '@material-ui/core/Snackbar';\nimport MuiAlert from '@material-ui/lab/Alert';\nimport { useGlobalFilter, usePagination, useRowSelect, useSortBy, useTable, useExpanded } from 'react-table';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst IndeterminateCheckbox = /*#__PURE__*/React.forwardRef(_c = _s(({\n  indeterminate,\n  ...rest\n}, ref) => {\n  _s();\n\n  const defaultRef = React.useRef();\n  const resolvedRef = ref || defaultRef;\n  React.useEffect(() => {\n    resolvedRef.current.indeterminate = indeterminate;\n  }, [resolvedRef, indeterminate]);\n  return /*#__PURE__*/_jsxDEV(Checkbox, {\n    ref: resolvedRef,\n    ...rest\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 27,\n    columnNumber: 9\n  }, this);\n}, \"ouw4KVvDKeit07oEcYWUcp3TdOA=\"));\n_c2 = IndeterminateCheckbox;\nconst inputStyle = {\n  padding: 0,\n  margin: 0,\n  border: 0,\n  background: 'transparent'\n}; // Create an editable cell renderer\n\nconst EditableCell = ({\n  data,\n  value: initialValue,\n  row: {\n    index\n  },\n  column: {\n    id\n  },\n  fieldsTableCell,\n  updateRecordInDB,\n  errorMsg,\n  resetErrorMsg,\n  setOpenErrorMsg\n}) => {\n  _s2();\n\n  // We need to keep and update the state of the cell normally\n  const [value, setValue] = React.useState(initialValue);\n  const [dlgOpen, setDlgOpen] = React.useState(false);\n\n  const onChange = e => {\n    if (e != null) {\n      // check whether if it's an object/array or an event (text fields)\n      if (!e.target) {\n        setValue(e);\n      } else {\n        setValue(e.target.value);\n      }\n    }\n  };\n\n  const updateCellData = (rowIndex, columnId, value) => {\n    const record = data.map((row, i) => {\n      if (i === rowIndex) {\n        return { ...data[rowIndex],\n          [columnId]: value\n        };\n      }\n\n      return row;\n    }).filter((row, i) => i === rowIndex).reduce(row => row);\n    updateRecordInDB(record);\n  }; // We'll only update the external data when the input is blurred\n\n\n  const onBlur = () => {\n    setOpenErrorMsg(false);\n    resetErrorMsg();\n    setDlgOpen(false);\n    updateCellData(index, id, value);\n  };\n\n  React.useEffect(() => {\n    if (errorMsg !== undefined) {\n      setOpenErrorMsg(true);\n      setValue(initialValue);\n    }\n  }, [errorMsg, setOpenErrorMsg, initialValue]); // If the initialValue is changed external, sync it up with our state\n\n  React.useEffect(() => {\n    setValue(initialValue);\n  }, [initialValue]);\n\n  const handleDlgOpen = () => {\n    setDlgOpen(true);\n  };\n\n  const handleDlgClose = () => {\n    setDlgOpen(false);\n    setValue(initialValue);\n  };\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: fieldsTableCell(id, inputStyle, value, onChange, onBlur, dlgOpen, handleDlgOpen, handleDlgClose)\n  }, void 0, false);\n};\n\n_s2(EditableCell, \"2xz8HoqRwKz+ZxNNQHgRf+2Evg0=\");\n\n_c3 = EditableCell;\nEditableCell.propTypes = {\n  cell: PropTypes.shape({\n    value: PropTypes.any.isRequired\n  }),\n  row: PropTypes.shape({\n    index: PropTypes.number.isRequired\n  }),\n  column: PropTypes.shape({\n    id: PropTypes.string.isRequired\n  }),\n  updateRecordInDB: PropTypes.func.isRequired\n}; // Set our editable cell renderer as the default Cell renderer\n\nconst defaultColumn = {\n  Cell: EditableCell\n};\n\nconst EnhancedTable = ({\n  columns,\n  data,\n  initialRecord,\n  fieldsForm,\n  fieldsTableCell,\n  deleteRecordInDB,\n  addRecordInDB,\n  updateRecordInDB,\n  errorMsg,\n  resetErrorMsg,\n  makeSubRow,\n  tableName\n}) => {\n  _s3();\n\n  const [openErrorMsg, setOpenErrorMsg] = React.useState(false);\n  const {\n    getTableProps,\n    prepareRow,\n    visibleColumns,\n    headerGroups,\n    page,\n    gotoPage,\n    setPageSize,\n    preGlobalFilteredRows,\n    setGlobalFilter,\n    state: {\n      pageIndex,\n      pageSize,\n      selectedRowIds,\n      globalFilter = ''\n    }\n  } = useTable({\n    columns,\n    data,\n    defaultColumn,\n    initialState: {\n      pageSize: 5\n    },\n    fieldsTableCell,\n    // pass to EditableCell\n    updateRecordInDB,\n    // pass to EditableCell\n    errorMsg,\n    // pass to EditableCell\n    resetErrorMsg,\n    // pass to EditableCell\n    setOpenErrorMsg // pass to EditableCell\n\n  }, useGlobalFilter, useSortBy, useExpanded, usePagination, useRowSelect, hooks => {\n    hooks.allColumns.push(columns => [...columns, // Let's make a column for selection\n    {\n      id: 'selection',\n      // The header can use the table's getToggleAllRowsSelectedProps method to render a checkbox.\n      // Pagination is a problem since this will select all rows even though not all rows are on the current page.\n      // The solution should be server side pagination.\n      // For one, the clients should not download all rows in most cases.\n      // The client should only download data for the current page.\n      // In that case, getToggleAllRowsSelectedProps works fine.\n      Header: ({\n        getToggleAllRowsSelectedProps\n      }) => /*#__PURE__*/_jsxDEV(\"div\", {\n        children: /*#__PURE__*/_jsxDEV(IndeterminateCheckbox, { ...getToggleAllRowsSelectedProps()\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 187,\n          columnNumber: 8\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 186,\n        columnNumber: 7\n      }, this),\n      // The cell can use the individual row's getToggleRowSelectedProps method to the render a checkbox\n      Cell: ({\n        row\n      }) => /*#__PURE__*/_jsxDEV(\"div\", {\n        children: /*#__PURE__*/_jsxDEV(IndeterminateCheckbox, { ...row.getToggleRowSelectedProps()\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 193,\n          columnNumber: 8\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 192,\n        columnNumber: 7\n      }, this)\n    }]);\n  });\n\n  const handleChangePage = (event, newPage) => {\n    gotoPage(newPage);\n  };\n\n  const handleChangeRowsPerPage = event => {\n    setPageSize(Number(event.target.value));\n  };\n\n  const getRemovedIndexes = (array, indexes) => array.filter((_, i) => indexes.includes(i));\n\n  const deleteRecordHandler = event => {\n    const removedIndexes = getRemovedIndexes(data, Object.keys(selectedRowIds).map(x => parseInt(x, 10)));\n    deleteRecordInDB(removedIndexes);\n  };\n\n  const addRecordHandler = record => {\n    addRecordInDB(record);\n  }; // In reality, you could pass whatever you want as props to a component like this,\n  // including the entire table instance. But for this example, we'll just pass the row\n\n\n  const renderRowSubComponent = React.useCallback(props => makeSubRow(props), [makeSubRow]);\n\n  const handleErrorClose = (event, reason) => {\n    if (reason === 'clickaway') {\n      return;\n    }\n\n    setOpenErrorMsg(false);\n    resetErrorMsg();\n  }; // error message for adding new record (validation from back-end)\n\n\n  React.useEffect(() => {\n    if (errorMsg !== undefined) {\n      setOpenErrorMsg(true);\n    }\n  }, [errorMsg]); // Render the UI for your table\n\n  return /*#__PURE__*/_jsxDEV(TableContainer, {\n    children: [/*#__PURE__*/_jsxDEV(TableToolbar, {\n      numSelected: Object.keys(selectedRowIds).length,\n      initialRecord: initialRecord,\n      fieldsForm: fieldsForm,\n      deleteRecordHandler: deleteRecordHandler,\n      addRecordHandler: addRecordHandler,\n      preGlobalFilteredRows: preGlobalFilteredRows,\n      setGlobalFilter: setGlobalFilter,\n      globalFilter: globalFilter,\n      tableName: tableName\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 245,\n      columnNumber: 4\n    }, this), /*#__PURE__*/_jsxDEV(MaUTable, { ...getTableProps(),\n      children: [/*#__PURE__*/_jsxDEV(TableHead, {\n        children: headerGroups.map(headerGroup => /*#__PURE__*/_jsxDEV(TableRow, { ...headerGroup.getHeaderGroupProps(),\n          children: headerGroup.headers.map(column => /*#__PURE__*/_jsxDEV(TableCell, { ...(column.id === 'selection' ? column.getHeaderProps() : column.getHeaderProps(column.getSortByToggleProps())),\n            children: [column.render('Header'), column.id !== 'selection' ? /*#__PURE__*/_jsxDEV(TableSortLabel, {\n              active: column.isSorted // react-table has a unsorted state which is not treated here\n              ,\n              direction: column.isSortedDesc ? 'desc' : 'asc'\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 266,\n              columnNumber: 11\n            }, this) : null]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 261,\n            columnNumber: 9\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 259,\n          columnNumber: 7\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 257,\n        columnNumber: 5\n      }, this), /*#__PURE__*/_jsxDEV(TableBody, {\n        children: page.map((row, i) => {\n          prepareRow(row);\n          return /*#__PURE__*/_jsxDEV(React.Fragment, {\n            children: [/*#__PURE__*/_jsxDEV(TableRow, { ...row.getRowProps(),\n              children: row.cells.map(cell => {\n                return /*#__PURE__*/_jsxDEV(TableCell, { ...cell.getCellProps(),\n                  children: cell.render('Cell')\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 284,\n                  columnNumber: 18\n                }, this);\n              })\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 282,\n              columnNumber: 9\n            }, this), row.isExpanded ? /*#__PURE__*/_jsxDEV(\"tr\", {\n              children: /*#__PURE__*/_jsxDEV(TableCell, {\n                colSpan: visibleColumns.length,\n                children: renderRowSubComponent(row.original)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 289,\n                columnNumber: 11\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 288,\n              columnNumber: 10\n            }, this) : null]\n          }, i, true, {\n            fileName: _jsxFileName,\n            lineNumber: 281,\n            columnNumber: 8\n          }, this);\n        })\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 277,\n        columnNumber: 5\n      }, this), Object.keys(initialRecord).length !== 0 ? /*#__PURE__*/_jsxDEV(TableFooter, {\n        children: /*#__PURE__*/_jsxDEV(TableRow, {\n          children: /*#__PURE__*/_jsxDEV(TablePagination, {\n            rowsPerPageOptions: [5, 10, 20],\n            colSpan: columns.length + 1 // +1 selection column\n            ,\n            count: data.length,\n            rowsPerPage: pageSize,\n            page: pageIndex,\n            SelectProps: {\n              inputProps: {\n                'aria-label': 'rows per page'\n              },\n              native: true\n            },\n            onChangePage: handleChangePage,\n            onChangeRowsPerPage: handleChangeRowsPerPage,\n            ActionsComponent: TablePaginationActions\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 300,\n            columnNumber: 8\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 299,\n          columnNumber: 7\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 298,\n        columnNumber: 6\n      }, this) : null]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 256,\n      columnNumber: 4\n    }, this), errorMsg !== undefined ? /*#__PURE__*/_jsxDEV(Snackbar, {\n      open: openErrorMsg,\n      autoHideDuration: 5000,\n      onClose: handleErrorClose,\n      children: /*#__PURE__*/_jsxDEV(MuiAlert, {\n        elevation: 6,\n        variant: \"filled\",\n        severity: \"error\",\n        onClose: handleErrorClose,\n        children: errorMsg\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 320,\n        columnNumber: 6\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 319,\n      columnNumber: 5\n    }, this) : null]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 244,\n    columnNumber: 3\n  }, this);\n};\n\n_s3(EnhancedTable, \"yDb2TgKHK3OXrxBuB7zlctxTE0U=\", false, function () {\n  return [useTable];\n});\n\n_c4 = EnhancedTable;\nEnhancedTable.propTypes = {\n  columns: PropTypes.array.isRequired,\n  data: PropTypes.array.isRequired,\n  initialRecord: PropTypes.object.isRequired,\n  fieldsForm: PropTypes.func.isRequired,\n  fieldsTableCell: PropTypes.func.isRequired,\n  deleteRecordInDB: PropTypes.func.isRequired,\n  addRecordInDB: PropTypes.func.isRequired,\n  updateRecordInDB: PropTypes.func.isRequired,\n  resetErrorMsg: PropTypes.func.isRequired,\n  tableName: PropTypes.string.isRequired\n};\nexport default EnhancedTable;\n\nvar _c, _c2, _c3, _c4;\n\n$RefreshReg$(_c, \"IndeterminateCheckbox$React.forwardRef\");\n$RefreshReg$(_c2, \"IndeterminateCheckbox\");\n$RefreshReg$(_c3, \"EditableCell\");\n$RefreshReg$(_c4, \"EnhancedTable\");","map":{"version":3,"sources":["/home/nhatnt/TN/FEcoffee/src/components/react-table/EnhancedTable.js"],"names":["React","Checkbox","MaUTable","PropTypes","TableBody","TableCell","TableContainer","TableFooter","TableHead","TablePagination","TablePaginationActions","TableRow","TableSortLabel","TableToolbar","Snackbar","MuiAlert","useGlobalFilter","usePagination","useRowSelect","useSortBy","useTable","useExpanded","IndeterminateCheckbox","forwardRef","indeterminate","rest","ref","defaultRef","useRef","resolvedRef","useEffect","current","inputStyle","padding","margin","border","background","EditableCell","data","value","initialValue","row","index","column","id","fieldsTableCell","updateRecordInDB","errorMsg","resetErrorMsg","setOpenErrorMsg","setValue","useState","dlgOpen","setDlgOpen","onChange","e","target","updateCellData","rowIndex","columnId","record","map","i","filter","reduce","onBlur","undefined","handleDlgOpen","handleDlgClose","propTypes","cell","shape","any","isRequired","number","string","func","defaultColumn","Cell","EnhancedTable","columns","initialRecord","fieldsForm","deleteRecordInDB","addRecordInDB","makeSubRow","tableName","openErrorMsg","getTableProps","prepareRow","visibleColumns","headerGroups","page","gotoPage","setPageSize","preGlobalFilteredRows","setGlobalFilter","state","pageIndex","pageSize","selectedRowIds","globalFilter","initialState","hooks","allColumns","push","Header","getToggleAllRowsSelectedProps","getToggleRowSelectedProps","handleChangePage","event","newPage","handleChangeRowsPerPage","Number","getRemovedIndexes","array","indexes","_","includes","deleteRecordHandler","removedIndexes","Object","keys","x","parseInt","addRecordHandler","renderRowSubComponent","useCallback","props","handleErrorClose","reason","length","headerGroup","getHeaderGroupProps","headers","getHeaderProps","getSortByToggleProps","render","isSorted","isSortedDesc","getRowProps","cells","getCellProps","isExpanded","original","inputProps","native","object"],"mappings":"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","sourcesContent":["import React from 'react';\nimport Checkbox from '@material-ui/core/Checkbox';\nimport MaUTable from '@material-ui/core/Table';\nimport PropTypes from 'prop-types';\nimport TableBody from '@material-ui/core/TableBody';\nimport TableCell from '@material-ui/core/TableCell';\nimport TableContainer from '@material-ui/core/TableContainer';\nimport TableFooter from '@material-ui/core/TableFooter';\nimport TableHead from '@material-ui/core/TableHead';\nimport TablePagination from '@material-ui/core/TablePagination';\nimport TablePaginationActions from './TablePaginationActions';\nimport TableRow from '@material-ui/core/TableRow';\nimport TableSortLabel from '@material-ui/core/TableSortLabel';\nimport TableToolbar from './TableToolbar';\nimport Snackbar from '@material-ui/core/Snackbar';\nimport MuiAlert from '@material-ui/lab/Alert';\nimport { useGlobalFilter, usePagination, useRowSelect, useSortBy, useTable, useExpanded } from 'react-table';\n\nconst IndeterminateCheckbox = React.forwardRef(({ indeterminate, ...rest }, ref) => {\n\tconst defaultRef = React.useRef();\n\tconst resolvedRef = ref || defaultRef;\n\n\tReact.useEffect(() => {\n\t\tresolvedRef.current.indeterminate = indeterminate;\n\t}, [resolvedRef, indeterminate]);\n\n\treturn <Checkbox ref={resolvedRef} {...rest} />;\n});\n\nconst inputStyle = {\n\tpadding: 0,\n\tmargin: 0,\n\tborder: 0,\n\tbackground: 'transparent',\n};\n\n// Create an editable cell renderer\nconst EditableCell = ({\n\tdata,\n\tvalue: initialValue,\n\trow: { index },\n\tcolumn: { id },\n\tfieldsTableCell,\n\tupdateRecordInDB,\n\terrorMsg,\n\tresetErrorMsg,\n\tsetOpenErrorMsg,\n}) => {\n\t// We need to keep and update the state of the cell normally\n\tconst [value, setValue] = React.useState(initialValue);\n\tconst [dlgOpen, setDlgOpen] = React.useState(false);\n\n\tconst onChange = (e) => {\n\t\tif (e != null) {\n\t\t\t// check whether if it's an object/array or an event (text fields)\n\t\t\tif (!e.target) {\n\t\t\t\tsetValue(e);\n\t\t\t} else {\n\t\t\t\tsetValue(e.target.value);\n\t\t\t}\n\t\t}\n\t};\n\n\tconst updateCellData = (rowIndex, columnId, value) => {\n\t\tconst record = data\n\t\t\t.map((row, i) => {\n\t\t\t\tif (i === rowIndex) {\n\t\t\t\t\treturn {\n\t\t\t\t\t\t...data[rowIndex],\n\t\t\t\t\t\t[columnId]: value,\n\t\t\t\t\t};\n\t\t\t\t}\n\t\t\t\treturn row;\n\t\t\t})\n\t\t\t.filter((row, i) => i === rowIndex)\n\t\t\t.reduce((row) => row);\n\t\tupdateRecordInDB(record);\n\t};\n\n\t// We'll only update the external data when the input is blurred\n\tconst onBlur = () => {\n\t\tsetOpenErrorMsg(false);\n\t\tresetErrorMsg();\n\t\tsetDlgOpen(false);\n\t\tupdateCellData(index, id, value);\n\t};\n\n\tReact.useEffect(() => {\n\t\tif (errorMsg !== undefined) {\n\t\t\tsetOpenErrorMsg(true);\n\t\t\tsetValue(initialValue);\n\t\t}\n\t}, [errorMsg, setOpenErrorMsg, initialValue]);\n\n\t// If the initialValue is changed external, sync it up with our state\n\tReact.useEffect(() => {\n\t\tsetValue(initialValue);\n\t}, [initialValue]);\n\n\tconst handleDlgOpen = () => {\n\t\tsetDlgOpen(true);\n\t};\n\n\tconst handleDlgClose = () => {\n\t\tsetDlgOpen(false);\n\t\tsetValue(initialValue);\n\t};\n\n\treturn <>{fieldsTableCell(id, inputStyle, value, onChange, onBlur, dlgOpen, handleDlgOpen, handleDlgClose)}</>;\n};\n\nEditableCell.propTypes = {\n\tcell: PropTypes.shape({\n\t\tvalue: PropTypes.any.isRequired,\n\t}),\n\trow: PropTypes.shape({\n\t\tindex: PropTypes.number.isRequired,\n\t}),\n\tcolumn: PropTypes.shape({\n\t\tid: PropTypes.string.isRequired,\n\t}),\n\tupdateRecordInDB: PropTypes.func.isRequired,\n};\n\n// Set our editable cell renderer as the default Cell renderer\nconst defaultColumn = {\n\tCell: EditableCell,\n};\n\nconst EnhancedTable = ({\n\tcolumns,\n\tdata,\n\tinitialRecord,\n\tfieldsForm,\n\tfieldsTableCell,\n\tdeleteRecordInDB,\n\taddRecordInDB,\n\tupdateRecordInDB,\n\terrorMsg,\n\tresetErrorMsg,\n\tmakeSubRow,\n\ttableName,\n}) => {\n\tconst [openErrorMsg, setOpenErrorMsg] = React.useState(false);\n\tconst {\n\t\tgetTableProps,\n\t\tprepareRow,\n\t\tvisibleColumns,\n\t\theaderGroups,\n\t\tpage,\n\t\tgotoPage,\n\t\tsetPageSize,\n\t\tpreGlobalFilteredRows,\n\t\tsetGlobalFilter,\n\t\tstate: { pageIndex, pageSize, selectedRowIds, globalFilter = '' },\n\t} = useTable(\n\t\t{\n\t\t\tcolumns,\n\t\t\tdata,\n\t\t\tdefaultColumn,\n\t\t\tinitialState: { pageSize: 5 },\n\t\t\tfieldsTableCell, // pass to EditableCell\n\t\t\tupdateRecordInDB, // pass to EditableCell\n\t\t\terrorMsg, // pass to EditableCell\n\t\t\tresetErrorMsg, // pass to EditableCell\n\t\t\tsetOpenErrorMsg, // pass to EditableCell\n\t\t},\n\t\tuseGlobalFilter,\n\t\tuseSortBy,\n\t\tuseExpanded,\n\t\tusePagination,\n\t\tuseRowSelect,\n\t\t(hooks) => {\n\t\t\thooks.allColumns.push((columns) => [\n\t\t\t\t...columns,\n\t\t\t\t// Let's make a column for selection\n\t\t\t\t{\n\t\t\t\t\tid: 'selection',\n\t\t\t\t\t// The header can use the table's getToggleAllRowsSelectedProps method to render a checkbox.\n\t\t\t\t\t// Pagination is a problem since this will select all rows even though not all rows are on the current page.\n\t\t\t\t\t// The solution should be server side pagination.\n\t\t\t\t\t// For one, the clients should not download all rows in most cases.\n\t\t\t\t\t// The client should only download data for the current page.\n\t\t\t\t\t// In that case, getToggleAllRowsSelectedProps works fine.\n\t\t\t\t\tHeader: ({ getToggleAllRowsSelectedProps }) => (\n\t\t\t\t\t\t<div>\n\t\t\t\t\t\t\t<IndeterminateCheckbox {...getToggleAllRowsSelectedProps()} />\n\t\t\t\t\t\t</div>\n\t\t\t\t\t),\n\t\t\t\t\t// The cell can use the individual row's getToggleRowSelectedProps method to the render a checkbox\n\t\t\t\t\tCell: ({ row }) => (\n\t\t\t\t\t\t<div>\n\t\t\t\t\t\t\t<IndeterminateCheckbox {...row.getToggleRowSelectedProps()} />\n\t\t\t\t\t\t</div>\n\t\t\t\t\t),\n\t\t\t\t},\n\t\t\t]);\n\t\t}\n\t);\n\n\tconst handleChangePage = (event, newPage) => {\n\t\tgotoPage(newPage);\n\t};\n\n\tconst handleChangeRowsPerPage = (event) => {\n\t\tsetPageSize(Number(event.target.value));\n\t};\n\n\tconst getRemovedIndexes = (array, indexes) => array.filter((_, i) => indexes.includes(i));\n\n\tconst deleteRecordHandler = (event) => {\n\t\tconst removedIndexes = getRemovedIndexes(\n\t\t\tdata,\n\t\t\tObject.keys(selectedRowIds).map((x) => parseInt(x, 10))\n\t\t);\n\t\tdeleteRecordInDB(removedIndexes);\n\t};\n\n\tconst addRecordHandler = (record) => {\n\t\taddRecordInDB(record);\n\t};\n\n\t// In reality, you could pass whatever you want as props to a component like this,\n\t// including the entire table instance. But for this example, we'll just pass the row\n\tconst renderRowSubComponent = React.useCallback((props) => makeSubRow(props), [makeSubRow]);\n\n\tconst handleErrorClose = (event, reason) => {\n\t\tif (reason === 'clickaway') {\n\t\t\treturn;\n\t\t}\n\t\tsetOpenErrorMsg(false);\n\t\tresetErrorMsg();\n\t};\n\n\t// error message for adding new record (validation from back-end)\n\tReact.useEffect(() => {\n\t\tif (errorMsg !== undefined) {\n\t\t\tsetOpenErrorMsg(true);\n\t\t}\n\t}, [errorMsg]);\n\n\t// Render the UI for your table\n\treturn (\n\t\t<TableContainer>\n\t\t\t<TableToolbar\n\t\t\t\tnumSelected={Object.keys(selectedRowIds).length}\n\t\t\t\tinitialRecord={initialRecord}\n\t\t\t\tfieldsForm={fieldsForm}\n\t\t\t\tdeleteRecordHandler={deleteRecordHandler}\n\t\t\t\taddRecordHandler={addRecordHandler}\n\t\t\t\tpreGlobalFilteredRows={preGlobalFilteredRows}\n\t\t\t\tsetGlobalFilter={setGlobalFilter}\n\t\t\t\tglobalFilter={globalFilter}\n\t\t\t\ttableName={tableName}\n\t\t\t/>\n\t\t\t<MaUTable {...getTableProps()}>\n\t\t\t\t<TableHead>\n\t\t\t\t\t{headerGroups.map((headerGroup) => (\n\t\t\t\t\t\t<TableRow {...headerGroup.getHeaderGroupProps()}>\n\t\t\t\t\t\t\t{headerGroup.headers.map((column) => (\n\t\t\t\t\t\t\t\t<TableCell\n\t\t\t\t\t\t\t\t\t{...(column.id === 'selection' ? column.getHeaderProps() : column.getHeaderProps(column.getSortByToggleProps()))}\n\t\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t\t{column.render('Header')}\n\t\t\t\t\t\t\t\t\t{column.id !== 'selection' ? (\n\t\t\t\t\t\t\t\t\t\t<TableSortLabel\n\t\t\t\t\t\t\t\t\t\t\tactive={column.isSorted}\n\t\t\t\t\t\t\t\t\t\t\t// react-table has a unsorted state which is not treated here\n\t\t\t\t\t\t\t\t\t\t\tdirection={column.isSortedDesc ? 'desc' : 'asc'}\n\t\t\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t\t\t) : null}\n\t\t\t\t\t\t\t\t</TableCell>\n\t\t\t\t\t\t\t))}\n\t\t\t\t\t\t</TableRow>\n\t\t\t\t\t))}\n\t\t\t\t</TableHead>\n\t\t\t\t<TableBody>\n\t\t\t\t\t{page.map((row, i) => {\n\t\t\t\t\t\tprepareRow(row);\n\t\t\t\t\t\treturn (\n\t\t\t\t\t\t\t<React.Fragment key={i}>\n\t\t\t\t\t\t\t\t<TableRow {...row.getRowProps()}>\n\t\t\t\t\t\t\t\t\t{row.cells.map((cell) => {\n\t\t\t\t\t\t\t\t\t\treturn <TableCell {...cell.getCellProps()}>{cell.render('Cell')}</TableCell>;\n\t\t\t\t\t\t\t\t\t})}\n\t\t\t\t\t\t\t\t</TableRow>\n\t\t\t\t\t\t\t\t{row.isExpanded ? (\n\t\t\t\t\t\t\t\t\t<tr>\n\t\t\t\t\t\t\t\t\t\t<TableCell colSpan={visibleColumns.length}>{renderRowSubComponent(row.original)}</TableCell>\n\t\t\t\t\t\t\t\t\t</tr>\n\t\t\t\t\t\t\t\t) : null}\n\t\t\t\t\t\t\t</React.Fragment>\n\t\t\t\t\t\t);\n\t\t\t\t\t})}\n\t\t\t\t</TableBody>\n\n\t\t\t\t{Object.keys(initialRecord).length !== 0 ? (\n\t\t\t\t\t<TableFooter>\n\t\t\t\t\t\t<TableRow>\n\t\t\t\t\t\t\t<TablePagination\n\t\t\t\t\t\t\t\trowsPerPageOptions={[5, 10, 20]}\n\t\t\t\t\t\t\t\tcolSpan={columns.length + 1} // +1 selection column\n\t\t\t\t\t\t\t\tcount={data.length}\n\t\t\t\t\t\t\t\trowsPerPage={pageSize}\n\t\t\t\t\t\t\t\tpage={pageIndex}\n\t\t\t\t\t\t\t\tSelectProps={{\n\t\t\t\t\t\t\t\t\tinputProps: { 'aria-label': 'rows per page' },\n\t\t\t\t\t\t\t\t\tnative: true,\n\t\t\t\t\t\t\t\t}}\n\t\t\t\t\t\t\t\tonChangePage={handleChangePage}\n\t\t\t\t\t\t\t\tonChangeRowsPerPage={handleChangeRowsPerPage}\n\t\t\t\t\t\t\t\tActionsComponent={TablePaginationActions}\n\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t</TableRow>\n\t\t\t\t\t</TableFooter>\n\t\t\t\t) : null}\n\t\t\t</MaUTable>\n\t\t\t{errorMsg !== undefined ? (\n\t\t\t\t<Snackbar open={openErrorMsg} autoHideDuration={5000} onClose={handleErrorClose}>\n\t\t\t\t\t<MuiAlert elevation={6} variant='filled' severity='error' onClose={handleErrorClose}>\n\t\t\t\t\t\t{errorMsg}\n\t\t\t\t\t</MuiAlert>\n\t\t\t\t</Snackbar>\n\t\t\t) : null}\n\t\t</TableContainer>\n\t);\n};\n\nEnhancedTable.propTypes = {\n\tcolumns: PropTypes.array.isRequired,\n\tdata: PropTypes.array.isRequired,\n\tinitialRecord: PropTypes.object.isRequired,\n\tfieldsForm: PropTypes.func.isRequired,\n\tfieldsTableCell: PropTypes.func.isRequired,\n\tdeleteRecordInDB: PropTypes.func.isRequired,\n\taddRecordInDB: PropTypes.func.isRequired,\n\tupdateRecordInDB: PropTypes.func.isRequired,\n\tresetErrorMsg: PropTypes.func.isRequired,\n\ttableName: PropTypes.string.isRequired,\n};\n\nexport default EnhancedTable;\n"]},"metadata":{},"sourceType":"module"}