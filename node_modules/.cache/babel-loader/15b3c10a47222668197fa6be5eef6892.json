{"ast":null,"code":"var _jsxFileName = \"/home/nhatnt/TN/FEcoffee/src/components/products/AddProductDialog.jsx\",\n    _s = $RefreshSig$();\n\nimport React from 'react';\nimport TextField from '@material-ui/core/TextField';\nimport { withStyles, makeStyles } from '@material-ui/core/styles';\nimport { useProducts } from '../app-context/ProductProvider';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst ValidationTextField = withStyles({\n  root: {\n    '& input:valid + fieldset': {\n      borderColor: 'green'\n    },\n    '& input:invalid + fieldset': {\n      borderColor: 'red'\n    },\n    '& input:valid:focus + fieldset': {\n      borderLeftWidth: 6\n    }\n  }\n})(TextField);\nconst generalInputStyle = {\n  variant: 'outlined',\n  size: 'small',\n  type: 'text',\n  required: true,\n  fullWidth: true,\n  style: {\n    marginBottom: '10px'\n  }\n};\nconst useStyles = makeStyles(() => ({\n  inputProps: {\n    fontSize: 14\n  },\n  InputLabelProps: {\n    fontSize: 14\n  }\n}));\n\nfunction AddProductDialog({\n  record,\n  handleChange = f => f,\n  setErrors = f => f\n}) {\n  _s();\n\n  const classes = useStyles();\n  const {\n    categories,\n    selectedCategory\n  } = useProducts();\n  const [selectedCategoryChanged, setSelectedCategoryChanged] = React.useState(false);\n  React.useEffect(() => {\n    setSelectedCategoryChanged(true);\n  }, [selectedCategory]);\n  React.useEffect(() => {\n    // 'record.category' condition only causes 'handleChange' to set category once at initial time,\n    // when 'selectedCategory' changed outside by user's clicking, 'record.category' still holds the old value (not empty string),\n    // and the 'handleChange' can not set new default category for adding new record,\n    // so we have to add 'selectedCategoryChanged' to check if 'selectedCategory' has changed outside\n    if (record.category === '' || selectedCategoryChanged) {\n      handleChange('category', categories[categories.map(category => category.id).indexOf(selectedCategory)]);\n      setSelectedCategoryChanged(false);\n    }\n\n    if (record.name === '' || record.image === '' || record.description === '') {\n      setErrors(true);\n    } else {\n      setErrors(false);\n    }\n  }, [record, setErrors, handleChange, categories, selectedCategory, selectedCategoryChanged]);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(ValidationTextField, { ...generalInputStyle,\n      label: \"Name\",\n      autoFocus: true,\n      value: record.name,\n      onChange: e => handleChange('name', e.target.value),\n      inputProps: {\n        className: classes.inputProps\n      },\n      InputLabelProps: {\n        className: classes.InputLabelProps\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 4\n    }, this), /*#__PURE__*/_jsxDEV(ValidationTextField, { ...generalInputStyle,\n      type: \"number\",\n      label: \"Price\",\n      inputProps: {\n        min: '0',\n        step: '0.01',\n        className: classes.inputProps\n      },\n      value: record.price,\n      onChange: e => handleChange('price', e.target.value),\n      InputLabelProps: {\n        className: classes.InputLabelProps\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 4\n    }, this), /*#__PURE__*/_jsxDEV(ValidationTextField, { ...generalInputStyle,\n      label: \"Image URL\",\n      value: record.image,\n      onChange: e => handleChange('image', e.target.value),\n      inputProps: {\n        className: classes.inputProps\n      },\n      InputLabelProps: {\n        className: classes.InputLabelProps\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 83,\n      columnNumber: 4\n    }, this), /*#__PURE__*/_jsxDEV(ValidationTextField, { ...generalInputStyle,\n      label: \"Description\",\n      value: record.description,\n      onChange: e => handleChange('description', e.target.value),\n      inputProps: {\n        className: classes.inputProps\n      },\n      InputLabelProps: {\n        className: classes.InputLabelProps\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 91,\n      columnNumber: 4\n    }, this)]\n  }, void 0, true);\n}\n\n_s(AddProductDialog, \"BXs8cRH8TWdPWHYGR2H3cmfvYM0=\", false, function () {\n  return [useStyles, useProducts];\n});\n\n_c = AddProductDialog;\nexport default AddProductDialog;\n\nvar _c;\n\n$RefreshReg$(_c, \"AddProductDialog\");","map":{"version":3,"sources":["/home/nhatnt/TN/FEcoffee/src/components/products/AddProductDialog.jsx"],"names":["React","TextField","withStyles","makeStyles","useProducts","ValidationTextField","root","borderColor","borderLeftWidth","generalInputStyle","variant","size","type","required","fullWidth","style","marginBottom","useStyles","inputProps","fontSize","InputLabelProps","AddProductDialog","record","handleChange","f","setErrors","classes","categories","selectedCategory","selectedCategoryChanged","setSelectedCategoryChanged","useState","useEffect","category","map","id","indexOf","name","image","description","e","target","value","className","min","step","price"],"mappings":"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","sourcesContent":["import React from 'react';\nimport TextField from '@material-ui/core/TextField';\nimport { withStyles, makeStyles } from '@material-ui/core/styles';\nimport { useProducts } from '../app-context/ProductProvider';\n\nconst ValidationTextField = withStyles({\n\troot: {\n\t\t'& input:valid + fieldset': {\n\t\t\tborderColor: 'green',\n\t\t},\n\t\t'& input:invalid + fieldset': {\n\t\t\tborderColor: 'red',\n\t\t},\n\t\t'& input:valid:focus + fieldset': {\n\t\t\tborderLeftWidth: 6,\n\t\t},\n\t},\n})(TextField);\n\nconst generalInputStyle = {\n\tvariant: 'outlined',\n\tsize: 'small',\n\ttype: 'text',\n\trequired: true,\n\tfullWidth: true,\n\tstyle: { marginBottom: '10px' },\n};\n\nconst useStyles = makeStyles(() => ({\n\tinputProps: {\n\t\tfontSize: 14,\n\t},\n\tInputLabelProps: {\n\t\tfontSize: 14,\n\t},\n}));\n\nfunction AddProductDialog({ record, handleChange = (f) => f, setErrors = (f) => f }) {\n\tconst classes = useStyles();\n\tconst { categories, selectedCategory } = useProducts();\n\tconst [selectedCategoryChanged, setSelectedCategoryChanged] = React.useState(false);\n\n\tReact.useEffect(() => {\n\t\tsetSelectedCategoryChanged(true);\n\t}, [selectedCategory]);\n\n\tReact.useEffect(() => {\n\t\t// 'record.category' condition only causes 'handleChange' to set category once at initial time,\n\t\t// when 'selectedCategory' changed outside by user's clicking, 'record.category' still holds the old value (not empty string),\n\t\t// and the 'handleChange' can not set new default category for adding new record,\n\t\t// so we have to add 'selectedCategoryChanged' to check if 'selectedCategory' has changed outside\n\t\tif (record.category === '' || selectedCategoryChanged) {\n\t\t\thandleChange('category', categories[categories.map((category) => category.id).indexOf(selectedCategory)]);\n\t\t\tsetSelectedCategoryChanged(false);\n\t\t}\n\t\tif (record.name === '' || record.image === '' || record.description === '') {\n\t\t\tsetErrors(true);\n\t\t} else {\n\t\t\tsetErrors(false);\n\t\t}\n\t}, [record, setErrors, handleChange, categories, selectedCategory, selectedCategoryChanged]);\n\n\treturn (\n\t\t<>\n\t\t\t<ValidationTextField\n\t\t\t\t{...generalInputStyle}\n\t\t\t\tlabel='Name'\n\t\t\t\tautoFocus\n\t\t\t\tvalue={record.name}\n\t\t\t\tonChange={(e) => handleChange('name', e.target.value)}\n\t\t\t\tinputProps={{ className: classes.inputProps }}\n\t\t\t\tInputLabelProps={{ className: classes.InputLabelProps }}\n\t\t\t/>\n\t\t\t<ValidationTextField\n\t\t\t\t{...generalInputStyle}\n\t\t\t\ttype='number'\n\t\t\t\tlabel='Price'\n\t\t\t\tinputProps={{ min: '0', step: '0.01', className: classes.inputProps }}\n\t\t\t\tvalue={record.price}\n\t\t\t\tonChange={(e) => handleChange('price', e.target.value)}\n\t\t\t\tInputLabelProps={{ className: classes.InputLabelProps }}\n\t\t\t/>\n\t\t\t<ValidationTextField\n\t\t\t\t{...generalInputStyle}\n\t\t\t\tlabel='Image URL'\n\t\t\t\tvalue={record.image}\n\t\t\t\tonChange={(e) => handleChange('image', e.target.value)}\n\t\t\t\tinputProps={{ className: classes.inputProps }}\n\t\t\t\tInputLabelProps={{ className: classes.InputLabelProps }}\n\t\t\t/>\n\t\t\t<ValidationTextField\n\t\t\t\t{...generalInputStyle}\n\t\t\t\tlabel='Description'\n\t\t\t\tvalue={record.description}\n\t\t\t\tonChange={(e) => handleChange('description', e.target.value)}\n\t\t\t\tinputProps={{ className: classes.inputProps }}\n\t\t\t\tInputLabelProps={{ className: classes.InputLabelProps }}\n\t\t\t/>\n\t\t</>\n\t);\n}\n\nexport default AddProductDialog;\n"]},"metadata":{},"sourceType":"module"}