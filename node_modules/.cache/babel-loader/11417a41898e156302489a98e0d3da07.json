{"ast":null,"code":"var _jsxFileName = \"/home/nhatnt/TN/FEcoffee/src/components/products/SubProduct.jsx\",\n    _s = $RefreshSig$();\n\nimport React from 'react';\nimport { useProducts } from '../app-context/ProductProvider';\nimport { Grid, TextField, Button } from '@material-ui/core';\nimport { Autocomplete } from '@material-ui/lab';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction SubProduct(props) {\n  _s();\n\n  const {\n    sizes,\n    toppings,\n    updateProduct\n  } = useProducts();\n  const [selectedSizes, setSelectedSizes] = React.useState(props.sizes);\n  const [selectedToppings, setSelectedToppings] = React.useState(props.toppings);\n\n  const handleSizesChange = newValue => {\n    setSelectedSizes(newValue);\n  };\n\n  const handleToppingsChange = newValue => {\n    setSelectedToppings(newValue);\n  };\n\n  const handleSave = () => {\n    updateProduct({ ...props,\n      sizes: selectedSizes,\n      toppings: selectedToppings\n    });\n  };\n\n  return /*#__PURE__*/_jsxDEV(Grid, {\n    container: true,\n    spacing: 4,\n    children: [/*#__PURE__*/_jsxDEV(Grid, {\n      item: true,\n      xs: 8,\n      sm: 4,\n      children: /*#__PURE__*/_jsxDEV(Autocomplete, {\n        multiple: true,\n        size: \"small\",\n        options: sizes,\n        getOptionLabel: option => option.name,\n        value: sizes.filter(option => selectedSizes.some(s => option.id === s.id)),\n        renderInput: params => /*#__PURE__*/_jsxDEV(TextField, { ...params,\n          variant: \"outlined\",\n          label: \"Sizes\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 32,\n          columnNumber: 31\n        }, this),\n        onChange: (event, newValue) => handleSizesChange(newValue)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 26,\n        columnNumber: 5\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 25,\n      columnNumber: 4\n    }, this), /*#__PURE__*/_jsxDEV(Grid, {\n      item: true,\n      xs: 12,\n      sm: 6,\n      children: /*#__PURE__*/_jsxDEV(Autocomplete, {\n        multiple: true,\n        size: \"small\",\n        options: toppings,\n        getOptionLabel: option => option.name,\n        value: toppings.filter(option => selectedToppings.some(t => option.id === t.id)),\n        renderInput: params => /*#__PURE__*/_jsxDEV(TextField, { ...params,\n          variant: \"outlined\",\n          label: \"Toppings\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 43,\n          columnNumber: 31\n        }, this),\n        onChange: (event, newValue) => handleToppingsChange(newValue)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 37,\n        columnNumber: 5\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 36,\n      columnNumber: 4\n    }, this), /*#__PURE__*/_jsxDEV(Grid, {\n      item: true,\n      xs: 4,\n      sm: 2,\n      children: /*#__PURE__*/_jsxDEV(Button, {\n        style: {\n          width: 180\n        },\n        variant: \"contained\",\n        color: \"primary\",\n        size: \"medium\",\n        onClick: handleSave,\n        children: \"save\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 48,\n        columnNumber: 5\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 4\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 24,\n    columnNumber: 3\n  }, this);\n}\n\n_s(SubProduct, \"bSjOSLW5/ZeNHSg9TkIEZCUERM0=\", false, function () {\n  return [useProducts];\n});\n\n_c = SubProduct;\nexport default SubProduct;\n\nvar _c;\n\n$RefreshReg$(_c, \"SubProduct\");","map":{"version":3,"sources":["/home/nhatnt/TN/FEcoffee/src/components/products/SubProduct.jsx"],"names":["React","useProducts","Grid","TextField","Button","Autocomplete","SubProduct","props","sizes","toppings","updateProduct","selectedSizes","setSelectedSizes","useState","selectedToppings","setSelectedToppings","handleSizesChange","newValue","handleToppingsChange","handleSave","option","name","filter","some","s","id","params","event","t","width"],"mappings":"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","sourcesContent":["import React from 'react';\nimport { useProducts } from '../app-context/ProductProvider';\nimport { Grid, TextField, Button } from '@material-ui/core';\nimport { Autocomplete } from '@material-ui/lab';\n\nfunction SubProduct(props) {\n\tconst { sizes, toppings, updateProduct } = useProducts();\n\tconst [selectedSizes, setSelectedSizes] = React.useState(props.sizes);\n\tconst [selectedToppings, setSelectedToppings] = React.useState(props.toppings);\n\n\tconst handleSizesChange = (newValue) => {\n\t\tsetSelectedSizes(newValue);\n\t};\n\n\tconst handleToppingsChange = (newValue) => {\n\t\tsetSelectedToppings(newValue);\n\t};\n\n\tconst handleSave = () => {\n\t\tupdateProduct({ ...props, sizes: selectedSizes, toppings: selectedToppings });\n\t};\n\n\treturn (\n\t\t<Grid container spacing={4}>\n\t\t\t<Grid item xs={8} sm={4}>\n\t\t\t\t<Autocomplete\n\t\t\t\t\tmultiple\n\t\t\t\t\tsize='small'\n\t\t\t\t\toptions={sizes}\n\t\t\t\t\tgetOptionLabel={(option) => option.name}\n\t\t\t\t\tvalue={sizes.filter((option) => selectedSizes.some((s) => option.id === s.id))}\n\t\t\t\t\trenderInput={(params) => <TextField {...params} variant='outlined' label='Sizes' />}\n\t\t\t\t\tonChange={(event, newValue) => handleSizesChange(newValue)}\n\t\t\t\t/>\n\t\t\t</Grid>\n\t\t\t<Grid item xs={12} sm={6}>\n\t\t\t\t<Autocomplete\n\t\t\t\t\tmultiple\n\t\t\t\t\tsize='small'\n\t\t\t\t\toptions={toppings}\n\t\t\t\t\tgetOptionLabel={(option) => option.name}\n\t\t\t\t\tvalue={toppings.filter((option) => selectedToppings.some((t) => option.id === t.id))}\n\t\t\t\t\trenderInput={(params) => <TextField {...params} variant='outlined' label='Toppings' />}\n\t\t\t\t\tonChange={(event, newValue) => handleToppingsChange(newValue)}\n\t\t\t\t/>\n\t\t\t</Grid>\n\t\t\t<Grid item xs={4} sm={2}>\n\t\t\t\t<Button style={{ width: 180 }} variant='contained' color='primary' size='medium' onClick={handleSave}>\n\t\t\t\t\tsave\n\t\t\t\t</Button>\n\t\t\t</Grid>\n\t\t</Grid>\n\t);\n}\n\nexport default SubProduct;\n"]},"metadata":{},"sourceType":"module"}