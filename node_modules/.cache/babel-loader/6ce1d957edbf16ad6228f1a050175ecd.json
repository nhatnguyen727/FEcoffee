{"ast":null,"code":"var _jsxFileName = \"/home/nhatnt/TN/FEcoffee/src/components/app-context/UserProvider.jsx\",\n    _s = $RefreshSig$(),\n    _s2 = $RefreshSig$();\n\nimport { useContext, createContext, useState, useMemo, useEffect } from 'react';\nimport { SERVER_URL } from '../../constants';\nimport { useHistory } from 'react-router-dom';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst UserContext = /*#__PURE__*/createContext();\nexport const useUsers = () => {\n  _s();\n\n  return useContext(UserContext);\n};\n\n_s(useUsers, \"gDsCjeeItUuvgOWf1v4qoK9RF6k=\");\n\nfunction UserProvider({\n  children\n}) {\n  _s2();\n\n  const history = useHistory();\n  const [selectedMenuClick, setSelectedMenuClick] = useState('beverages'); // if you set empty string here, it will failed when you try to refresh the page\n\n  const [roles, setRoles] = useState([]);\n  const [users, setUsers] = useState([]);\n  const [dataChanged, setDataChanged] = useState(false);\n  const [errorMsg, setErrorMsg] = useState();\n  const [userLoading, setUserLoading] = useState(false);\n  const [doorOpened, setDoorOpened] = useState(false); // for checking role admin or member\n\n  const [profileChanged, setProfileChanged] = useState(false);\n\n  const getSelectedMenuClick = key => {\n    setSelectedMenuClick(key);\n  };\n\n  const notifyProfileChanges = bool => {\n    setProfileChanged(bool);\n  };\n\n  useMemo(() => {\n    // prevent loading if 'users' in the side menu not be clicked\n    if (selectedMenuClick !== 'users') {\n      return;\n    }\n\n    let token = sessionStorage.getItem('starbucks-admin-jwt');\n    setUserLoading(true);\n    fetch(SERVER_URL + '/admin/role', {\n      headers: {\n        Authorization: token\n      }\n    }).then(response => response.json()).then(setRoles).then(() => fetch(SERVER_URL + '/admin/user', {\n      headers: {\n        Authorization: token\n      }\n    }).then(response => response.json()).then(result => result.filter(user => user.id !== JSON.parse(sessionStorage.getItem('starbucks-admin')).id)).then(setUsers).then(() => setUserLoading(false)));\n  }, [selectedMenuClick]);\n\n  const login = values => {\n    setUserLoading(true);\n    fetch(SERVER_URL + '/login', {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify(values)\n    }).then(response => {\n      if (response.status !== 200) {\n        setErrorMsg('Username or password is incorrect!');\n        return null;\n      }\n\n      sessionStorage.setItem('starbucks-admin-jwt', response.headers.get('Authorization'));\n      return response.json();\n    }) // 'user' is returned from the previous the promise 'response.json()'... we can name it whatever we want\n    .then(user => {\n      if (user !== null) {\n        if (user.role.id === 1) {\n          sessionStorage.setItem('starbucks-admin', JSON.stringify(user));\n          setDoorOpened(true);\n        } else {\n          setErrorMsg('Username or password is incorrect!');\n        }\n      }\n    }).then(() => setUserLoading(false));\n  };\n\n  useEffect(() => {\n    if (!doorOpened) {\n      return;\n    }\n\n    if (sessionStorage.getItem('starbucks-admin') !== null) {\n      history.push('/admin/dashboard');\n      setDoorOpened(false);\n\n      if (errorMsg !== undefined) {\n        setErrorMsg(); // set back to undefined for using in the 'Users' table\n      }\n    }\n  }, [doorOpened, history, errorMsg]);\n\n  const logout = () => {\n    sessionStorage.removeItem('starbucks-admin-jwt');\n    sessionStorage.removeItem('starbucks-admin');\n    history.push('/loginAdmin');\n  };\n\n  const deleteUsers = async users => {\n    let token = sessionStorage.getItem('starbucks-admin-jwt');\n    let urls = users.map(user => SERVER_URL + `/admin/user/${user.id}`);\n    setUserLoading(true);\n    await Promise.all(urls.map(url => fetch(url, {\n      method: 'DELETE',\n      headers: {\n        Authorization: token\n      }\n    })));\n    setDataChanged(true);\n  };\n\n  const addUser = user => {\n    let token = sessionStorage.getItem('starbucks-admin-jwt');\n    setUserLoading(true);\n    fetch(SERVER_URL + '/admin/user/register', {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n        Authorization: token\n      },\n      body: JSON.stringify(user)\n    }).then(response => {\n      if (response.status === 409) {\n        return response.text();\n      }\n    }).then(setErrorMsg).then(() => setDataChanged(true));\n  };\n\n  const updateUser = user => {\n    let token = sessionStorage.getItem('starbucks-admin-jwt');\n    setUserLoading(true);\n    fetch(SERVER_URL + `/admin/user/${user.id}`, {\n      method: 'PUT',\n      headers: {\n        'Content-Type': 'application/json',\n        Authorization: token\n      },\n      body: JSON.stringify(user)\n    }).then(response => {\n      // 403 forbidden (validation); 409 conflict (unique)\n      if (response.status === 403 || response.status === 409) {\n        return response.text();\n      }\n    }).then(setErrorMsg).then(() => setDataChanged(true));\n  };\n\n  useEffect(() => {\n    // prevent loading when user is outside of 'users' scope components (because UserProvider wraps the container)\n    if (dataChanged) {\n      let token = sessionStorage.getItem('starbucks-admin-jwt');\n      fetch(SERVER_URL + '/admin/user', {\n        headers: {\n          Authorization: token\n        }\n      }).then(response => response.json()).then(result => result.filter(user => user.id !== JSON.parse(sessionStorage.getItem('starbucks-admin')).id)).then(setUsers).then(() => setDataChanged(false)).then(() => setUserLoading(false));\n    }\n  }, [dataChanged]);\n\n  const resetErrorMsg = () => {\n    setErrorMsg(); // set back to undefined (no errors)\n  };\n\n  return /*#__PURE__*/_jsxDEV(UserContext.Provider, {\n    value: {\n      roles,\n      users,\n      userLoading,\n      login,\n      logout,\n      deleteUsers,\n      addUser,\n      updateUser,\n      errorMsg,\n      resetErrorMsg,\n      selectedMenuClick,\n      getSelectedMenuClick,\n      profileChanged,\n      notifyProfileChanges\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 175,\n    columnNumber: 3\n  }, this);\n}\n\n_s2(UserProvider, \"jVyb0056m+rTae83MDMvI2NdT1w=\", false, function () {\n  return [useHistory];\n});\n\n_c = UserProvider;\nexport default UserProvider;\n\nvar _c;\n\n$RefreshReg$(_c, \"UserProvider\");","map":{"version":3,"sources":["/home/nhatnt/TN/FEcoffee/src/components/app-context/UserProvider.jsx"],"names":["useContext","createContext","useState","useMemo","useEffect","SERVER_URL","useHistory","UserContext","useUsers","UserProvider","children","history","selectedMenuClick","setSelectedMenuClick","roles","setRoles","users","setUsers","dataChanged","setDataChanged","errorMsg","setErrorMsg","userLoading","setUserLoading","doorOpened","setDoorOpened","profileChanged","setProfileChanged","getSelectedMenuClick","key","notifyProfileChanges","bool","token","sessionStorage","getItem","fetch","headers","Authorization","then","response","json","result","filter","user","id","JSON","parse","login","values","method","body","stringify","status","setItem","get","role","push","undefined","logout","removeItem","deleteUsers","urls","map","Promise","all","url","addUser","text","updateUser","resetErrorMsg"],"mappings":"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","sourcesContent":["import { useContext, createContext, useState, useMemo, useEffect } from 'react';\nimport { SERVER_URL } from '../../constants';\nimport { useHistory } from 'react-router-dom';\n\nconst UserContext = createContext();\n\nexport const useUsers = () => useContext(UserContext);\n\nfunction UserProvider({ children }) {\n\tconst history = useHistory();\n\tconst [selectedMenuClick, setSelectedMenuClick] = useState('beverages'); // if you set empty string here, it will failed when you try to refresh the page\n\tconst [roles, setRoles] = useState([]);\n\tconst [users, setUsers] = useState([]);\n\tconst [dataChanged, setDataChanged] = useState(false);\n\tconst [errorMsg, setErrorMsg] = useState();\n\tconst [userLoading, setUserLoading] = useState(false);\n\tconst [doorOpened, setDoorOpened] = useState(false); // for checking role admin or member\n\tconst [profileChanged, setProfileChanged] = useState(false);\n\n\tconst getSelectedMenuClick = (key) => {\n\t\tsetSelectedMenuClick(key);\n\t};\n\n\tconst notifyProfileChanges = (bool) => {\n\t\tsetProfileChanged(bool);\n\t};\n\n\tuseMemo(() => {\n\t\t// prevent loading if 'users' in the side menu not be clicked\n\t\tif (selectedMenuClick !== 'users') {\n\t\t\treturn;\n\t\t}\n\t\tlet token = sessionStorage.getItem('starbucks-admin-jwt');\n\t\tsetUserLoading(true);\n\t\tfetch(SERVER_URL + '/admin/role', {\n\t\t\theaders: { Authorization: token },\n\t\t})\n\t\t\t.then((response) => response.json())\n\t\t\t.then(setRoles)\n\t\t\t.then(() =>\n\t\t\t\tfetch(SERVER_URL + '/admin/user', {\n\t\t\t\t\theaders: { Authorization: token },\n\t\t\t\t})\n\t\t\t\t\t.then((response) => response.json())\n\t\t\t\t\t.then((result) => result.filter((user) => user.id !== JSON.parse(sessionStorage.getItem('starbucks-admin')).id))\n\t\t\t\t\t.then(setUsers)\n\t\t\t\t\t.then(() => setUserLoading(false))\n\t\t\t);\n\t}, [selectedMenuClick]);\n\n\tconst login = (values) => {\n\t\tsetUserLoading(true);\n\t\tfetch(SERVER_URL + '/login', {\n\t\t\tmethod: 'POST',\n\t\t\theaders: { 'Content-Type': 'application/json' },\n\t\t\tbody: JSON.stringify(values),\n\t\t})\n\t\t\t.then((response) => {\n\t\t\t\tif (response.status !== 200) {\n\t\t\t\t\tsetErrorMsg('Username or password is incorrect!');\n\t\t\t\t\treturn null;\n\t\t\t\t}\n\t\t\t\tsessionStorage.setItem('starbucks-admin-jwt', response.headers.get('Authorization'));\n\t\t\t\treturn response.json();\n\t\t\t})\n\t\t\t// 'user' is returned from the previous the promise 'response.json()'... we can name it whatever we want\n\t\t\t.then((user) => {\n\t\t\t\tif (user !== null) {\n\t\t\t\t\tif (user.role.id === 1) {\n\t\t\t\t\t\tsessionStorage.setItem('starbucks-admin', JSON.stringify(user));\n\t\t\t\t\t\tsetDoorOpened(true);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tsetErrorMsg('Username or password is incorrect!');\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t})\n\t\t\t.then(() => setUserLoading(false));\n\t};\n\n\tuseEffect(() => {\n\t\tif (!doorOpened) {\n\t\t\treturn;\n\t\t}\n\t\tif (sessionStorage.getItem('starbucks-admin') !== null) {\n\t\t\thistory.push('/admin/dashboard');\n\t\t\tsetDoorOpened(false);\n\t\t\tif (errorMsg !== undefined) {\n\t\t\t\tsetErrorMsg(); // set back to undefined for using in the 'Users' table\n\t\t\t}\n\t\t}\n\t}, [doorOpened, history, errorMsg]);\n\n\tconst logout = () => {\n\t\tsessionStorage.removeItem('starbucks-admin-jwt');\n\t\tsessionStorage.removeItem('starbucks-admin');\n\t\thistory.push('/loginAdmin');\n\t};\n\n\tconst deleteUsers = async (users) => {\n\t\tlet token = sessionStorage.getItem('starbucks-admin-jwt');\n\t\tlet urls = users.map((user) => SERVER_URL + `/admin/user/${user.id}`);\n\t\tsetUserLoading(true);\n\t\tawait Promise.all(\n\t\t\turls.map((url) =>\n\t\t\t\tfetch(url, {\n\t\t\t\t\tmethod: 'DELETE',\n\t\t\t\t\theaders: { Authorization: token },\n\t\t\t\t})\n\t\t\t)\n\t\t);\n\t\tsetDataChanged(true);\n\t};\n\n\tconst addUser = (user) => {\n\t\tlet token = sessionStorage.getItem('starbucks-admin-jwt');\n\t\tsetUserLoading(true);\n\t\tfetch(SERVER_URL + '/admin/user/register', {\n\t\t\tmethod: 'POST',\n\t\t\theaders: {\n\t\t\t\t'Content-Type': 'application/json',\n\t\t\t\tAuthorization: token,\n\t\t\t},\n\t\t\tbody: JSON.stringify(user),\n\t\t})\n\t\t\t.then((response) => {\n\t\t\t\tif (response.status === 409) {\n\t\t\t\t\treturn response.text();\n\t\t\t\t}\n\t\t\t})\n\t\t\t.then(setErrorMsg)\n\t\t\t.then(() => setDataChanged(true));\n\t};\n\n\tconst updateUser = (user) => {\n\t\tlet token = sessionStorage.getItem('starbucks-admin-jwt');\n\t\tsetUserLoading(true);\n\t\tfetch(SERVER_URL + `/admin/user/${user.id}`, {\n\t\t\tmethod: 'PUT',\n\t\t\theaders: {\n\t\t\t\t'Content-Type': 'application/json',\n\t\t\t\tAuthorization: token,\n\t\t\t},\n\t\t\tbody: JSON.stringify(user),\n\t\t})\n\t\t\t.then((response) => {\n\t\t\t\t// 403 forbidden (validation); 409 conflict (unique)\n\t\t\t\tif (response.status === 403 || response.status === 409) {\n\t\t\t\t\treturn response.text();\n\t\t\t\t}\n\t\t\t})\n\t\t\t.then(setErrorMsg)\n\t\t\t.then(() => setDataChanged(true));\n\t};\n\n\tuseEffect(() => {\n\t\t// prevent loading when user is outside of 'users' scope components (because UserProvider wraps the container)\n\t\tif (dataChanged) {\n\t\t\tlet token = sessionStorage.getItem('starbucks-admin-jwt');\n\t\t\tfetch(SERVER_URL + '/admin/user', {\n\t\t\t\theaders: { Authorization: token },\n\t\t\t})\n\t\t\t\t.then((response) => response.json())\n\t\t\t\t.then((result) => result.filter((user) => user.id !== JSON.parse(sessionStorage.getItem('starbucks-admin')).id))\n\t\t\t\t.then(setUsers)\n\t\t\t\t.then(() => setDataChanged(false))\n\t\t\t\t.then(() => setUserLoading(false));\n\t\t}\n\t}, [dataChanged]);\n\n\tconst resetErrorMsg = () => {\n\t\tsetErrorMsg(); // set back to undefined (no errors)\n\t};\n\n\treturn (\n\t\t<UserContext.Provider\n\t\t\tvalue={{\n\t\t\t\troles,\n\t\t\t\tusers,\n\t\t\t\tuserLoading,\n\t\t\t\tlogin,\n\t\t\t\tlogout,\n\t\t\t\tdeleteUsers,\n\t\t\t\taddUser,\n\t\t\t\tupdateUser,\n\t\t\t\terrorMsg,\n\t\t\t\tresetErrorMsg,\n\t\t\t\tselectedMenuClick,\n\t\t\t\tgetSelectedMenuClick,\n\t\t\t\tprofileChanged,\n\t\t\t\tnotifyProfileChanges,\n\t\t\t}}\n\t\t>\n\t\t\t{children}\n\t\t</UserContext.Provider>\n\t);\n}\n\nexport default UserProvider;\n"]},"metadata":{},"sourceType":"module"}