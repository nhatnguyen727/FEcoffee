{"ast":null,"code":"var _jsxFileName = \"/home/nhatnt/TN/FEcoffee/src/components/orders/DetailFieldsTableCell.jsx\",\n    _s = $RefreshSig$();\n\nimport React from 'react';\nimport { TextField, Grid, IconButton } from '@material-ui/core';\nimport SaveRoundedIcon from '@material-ui/icons/SaveRounded';\nimport Autocomplete from '@material-ui/lab/Autocomplete';\nimport { useOrders } from '../app-context/OrderProvider';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction DetailFieldsTableCell({\n  columnId,\n  inputStyle,\n  value,\n  onChange = f => f,\n  onBlur = f => f\n}) {\n  _s();\n\n  const {\n    sizes,\n    toppings\n  } = useOrders();\n\n  if (columnId === 'productName') {\n    return /*#__PURE__*/_jsxDEV(\"label\", {\n      style: {\n        color: 'grey'\n      },\n      children: value\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 11,\n      columnNumber: 10\n    }, this);\n  }\n\n  if (columnId === 'quantity') {\n    return /*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"number\",\n      min: \"0\",\n      step: \"1\",\n      style: { ...inputStyle,\n        width: 80\n      },\n      value: value,\n      onChange: onChange,\n      onBlur: onBlur\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 14,\n      columnNumber: 10\n    }, this);\n  }\n\n  if (columnId === 'size') {\n    return /*#__PURE__*/_jsxDEV(Autocomplete, {\n      options: sizes,\n      style: {\n        width: 100,\n        margin: 0,\n        padding: 0\n      },\n      size: \"small\",\n      renderInput: params => /*#__PURE__*/_jsxDEV(TextField, { ...params,\n        onBlur: onBlur\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 22,\n        columnNumber: 30\n      }, this),\n      value: sizes[sizes.map(size => size.id).indexOf(value.id)],\n      getOptionLabel: value => value.name,\n      onChange: (event, newValue) => onChange(newValue),\n      disableClearable: true\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 18,\n      columnNumber: 4\n    }, this);\n  }\n\n  if (columnId === 'toppings') {\n    return /*#__PURE__*/_jsxDEV(Grid, {\n      container: true,\n      style: {\n        width: 300\n      },\n      children: [/*#__PURE__*/_jsxDEV(Grid, {\n        item: true,\n        xs: 12,\n        sm: 10,\n        children: /*#__PURE__*/_jsxDEV(Autocomplete, {\n          multiple: true,\n          size: \"small\",\n          fullWidth: true,\n          options: toppings,\n          getOptionLabel: option => option.name,\n          value: toppings.filter(option => value.some(topping => option.id === topping.id)),\n          renderInput: params => /*#__PURE__*/_jsxDEV(TextField, { ...params,\n            variant: \"outlined\",\n            label: \"Toppings\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 41,\n            columnNumber: 32\n          }, this),\n          onChange: (event, newValue) => onChange(newValue)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 34,\n          columnNumber: 6\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 33,\n        columnNumber: 5\n      }, this), /*#__PURE__*/_jsxDEV(Grid, {\n        item: true,\n        xs: 2,\n        sm: 2,\n        children: /*#__PURE__*/_jsxDEV(IconButton, {\n          onClick: onBlur,\n          title: \"Save Toppings\",\n          children: /*#__PURE__*/_jsxDEV(SaveRoundedIcon, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 47,\n            columnNumber: 7\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 46,\n          columnNumber: 6\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 45,\n        columnNumber: 5\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 32,\n      columnNumber: 4\n    }, this);\n  }\n\n  return /*#__PURE__*/_jsxDEV(\"input\", {\n    style: { ...inputStyle,\n      width: 140\n    },\n    value: value,\n    onChange: onChange,\n    onBlur: onBlur\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 53,\n    columnNumber: 9\n  }, this);\n}\n\n_s(DetailFieldsTableCell, \"mpA84rAki2j+B5YHM9E794QxOfQ=\", false, function () {\n  return [useOrders];\n});\n\n_c = DetailFieldsTableCell;\nexport default DetailFieldsTableCell;\n\nvar _c;\n\n$RefreshReg$(_c, \"DetailFieldsTableCell\");","map":{"version":3,"sources":["/home/nhatnt/TN/FEcoffee/src/components/orders/DetailFieldsTableCell.jsx"],"names":["React","TextField","Grid","IconButton","SaveRoundedIcon","Autocomplete","useOrders","DetailFieldsTableCell","columnId","inputStyle","value","onChange","f","onBlur","sizes","toppings","color","width","margin","padding","params","map","size","id","indexOf","name","event","newValue","option","filter","some","topping"],"mappings":"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","sourcesContent":["import React from 'react';\nimport { TextField, Grid, IconButton } from '@material-ui/core';\nimport SaveRoundedIcon from '@material-ui/icons/SaveRounded';\nimport Autocomplete from '@material-ui/lab/Autocomplete';\nimport { useOrders } from '../app-context/OrderProvider';\n\nfunction DetailFieldsTableCell({ columnId, inputStyle, value, onChange = (f) => f, onBlur = (f) => f }) {\n\tconst { sizes, toppings } = useOrders();\n\n\tif (columnId === 'productName') {\n\t\treturn <label style={{ color: 'grey' }}>{value}</label>;\n\t}\n\tif (columnId === 'quantity') {\n\t\treturn <input type='number' min='0' step='1' style={{ ...inputStyle, width: 80 }} value={value} onChange={onChange} onBlur={onBlur} />;\n\t}\n\tif (columnId === 'size') {\n\t\treturn (\n\t\t\t<Autocomplete\n\t\t\t\toptions={sizes}\n\t\t\t\tstyle={{ width: 100, margin: 0, padding: 0 }}\n\t\t\t\tsize='small'\n\t\t\t\trenderInput={(params) => <TextField {...params} onBlur={onBlur} />}\n\t\t\t\tvalue={sizes[sizes.map((size) => size.id).indexOf(value.id)]}\n\t\t\t\tgetOptionLabel={(value) => value.name}\n\t\t\t\tonChange={(event, newValue) => onChange(newValue)}\n\t\t\t\tdisableClearable\n\t\t\t/>\n\t\t);\n\t}\n\tif (columnId === 'toppings') {\n\t\treturn (\n\t\t\t<Grid container style={{ width: 300 }}>\n\t\t\t\t<Grid item xs={12} sm={10}>\n\t\t\t\t\t<Autocomplete\n\t\t\t\t\t\tmultiple\n\t\t\t\t\t\tsize='small'\n\t\t\t\t\t\tfullWidth\n\t\t\t\t\t\toptions={toppings}\n\t\t\t\t\t\tgetOptionLabel={(option) => option.name}\n\t\t\t\t\t\tvalue={toppings.filter((option) => value.some((topping) => option.id === topping.id))}\n\t\t\t\t\t\trenderInput={(params) => <TextField {...params} variant='outlined' label='Toppings' />}\n\t\t\t\t\t\tonChange={(event, newValue) => onChange(newValue)}\n\t\t\t\t\t/>\n\t\t\t\t</Grid>\n\t\t\t\t<Grid item xs={2} sm={2}>\n\t\t\t\t\t<IconButton onClick={onBlur} title='Save Toppings'>\n\t\t\t\t\t\t<SaveRoundedIcon />\n\t\t\t\t\t</IconButton>\n\t\t\t\t</Grid>\n\t\t\t</Grid>\n\t\t);\n\t}\n\treturn <input style={{ ...inputStyle, width: 140 }} value={value} onChange={onChange} onBlur={onBlur} />;\n}\n\nexport default DetailFieldsTableCell;\n"]},"metadata":{},"sourceType":"module"}