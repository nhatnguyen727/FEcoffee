{"ast":null,"code":"var _jsxFileName = \"/home/nhatnt/TN/FEcoffee/src/components/app-context/ProfileProvider.jsx\",\n    _s = $RefreshSig$(),\n    _s2 = $RefreshSig$();\n\nimport { useContext, createContext, useState, useMemo, useEffect } from 'react';\nimport { SERVER_URL } from '../../constants';\nimport { useUsers } from './UserProvider';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ProfileContext = /*#__PURE__*/createContext();\nexport const useProfile = () => {\n  _s();\n\n  return useContext(ProfileContext);\n};\n\n_s(useProfile, \"gDsCjeeItUuvgOWf1v4qoK9RF6k=\");\n\nfunction ProfileProvider({\n  children\n}) {\n  _s2();\n\n  const {\n    logout,\n    notifyProfileChanges\n  } = useUsers();\n  const [roles, setRoles] = useState([]);\n  const [profile, setProfile] = useState();\n  const [credentialDataChanged, setCredentialDataChanged] = useState(false);\n  const [dataSaved, setDataSaved] = useState(false);\n  const [profileLoading, setProfileLoading] = useState(false);\n  const [errorMsg, setErrorMsg] = useState(); // first loading\n\n  useMemo(() => {\n    setProfileLoading(true);\n    let token = sessionStorage.getItem('starbucks-admin-jwt');\n    fetch(SERVER_URL + '/admin/role', {\n      headers: {\n        Authorization: token\n      }\n    }).then(response => response.json()).then(setRoles).then(() => {\n      let username = JSON.parse(sessionStorage.getItem('starbucks-admin')).username;\n      fetch(SERVER_URL + `/user/username=${username}`, {\n        headers: {\n          Authorization: token\n        }\n      }).then(response => response.json()).then(setProfile).then(() => setProfileLoading(false));\n    });\n  }, []);\n\n  const isCredentialDataChanged = (fieldName, value) => {\n    let user = JSON.parse(sessionStorage.getItem('starbucks-admin'));\n\n    if (value !== user[fieldName]) {\n      return true;\n    } else {\n      return false;\n    }\n  };\n\n  const handleChange = (fieldName, value) => {\n    setProfile({ ...profile,\n      [fieldName]: value\n    });\n\n    if (fieldName === 'username' || fieldName === 'password' || fieldName === 'role') {\n      setCredentialDataChanged(isCredentialDataChanged(fieldName, value));\n    }\n  };\n\n  const updateUser = user => {\n    setProfileLoading(true);\n    let token = sessionStorage.getItem('starbucks-admin-jwt');\n    fetch(SERVER_URL + `/admin/user/${user.id}`, {\n      method: 'PUT',\n      headers: {\n        'Content-Type': 'application/json',\n        Authorization: token\n      },\n      body: JSON.stringify(user)\n    }).then(response => {\n      // 403 forbidden (validation); 409 conflict (unique)\n      if (response.status === 403 || response.status === 409) {\n        return response.text();\n      } else {\n        // for updating new current user to the outside (photo and fullname displayed in the side menu)\n        sessionStorage.setItem('starbucks-admin', JSON.stringify(user));\n      }\n    }).then(setErrorMsg).then(() => setDataSaved(true)).then(() => setProfileLoading(false));\n  };\n\n  const setErrorMsgContent = value => {\n    setErrorMsg(value); // set message content or we can set back to undefined (no errors)\n  };\n\n  useEffect(() => {\n    if (dataSaved && errorMsg === undefined) {\n      if (credentialDataChanged) {\n        logout();\n      } else {\n        notifyProfileChanges(true); // notify the outside (current user on the header) to get new current user from session storage\n      }\n    }\n  }, [credentialDataChanged, dataSaved, errorMsg, logout, notifyProfileChanges]);\n  useEffect(() => {\n    if (dataSaved) {\n      setDataSaved(false); // set back to 'false'\n    }\n  }, [dataSaved]);\n  return /*#__PURE__*/_jsxDEV(ProfileContext.Provider, {\n    value: {\n      roles,\n      profile,\n      handleChange,\n      updateUser,\n      profileLoading,\n      errorMsg,\n      setErrorMsgContent\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 100,\n    columnNumber: 3\n  }, this);\n}\n\n_s2(ProfileProvider, \"p4v2Q/fCaxBhpwmDWc4hpvpn+Do=\", false, function () {\n  return [useUsers];\n});\n\n_c = ProfileProvider;\nexport default ProfileProvider;\n\nvar _c;\n\n$RefreshReg$(_c, \"ProfileProvider\");","map":{"version":3,"sources":["/home/nhatnt/TN/FEcoffee/src/components/app-context/ProfileProvider.jsx"],"names":["useContext","createContext","useState","useMemo","useEffect","SERVER_URL","useUsers","ProfileContext","useProfile","ProfileProvider","children","logout","notifyProfileChanges","roles","setRoles","profile","setProfile","credentialDataChanged","setCredentialDataChanged","dataSaved","setDataSaved","profileLoading","setProfileLoading","errorMsg","setErrorMsg","token","sessionStorage","getItem","fetch","headers","Authorization","then","response","json","username","JSON","parse","isCredentialDataChanged","fieldName","value","user","handleChange","updateUser","id","method","body","stringify","status","text","setItem","setErrorMsgContent","undefined"],"mappings":"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","sourcesContent":["import { useContext, createContext, useState, useMemo, useEffect } from 'react';\nimport { SERVER_URL } from '../../constants';\nimport { useUsers } from './UserProvider';\n\nconst ProfileContext = createContext();\n\nexport const useProfile = () => useContext(ProfileContext);\n\nfunction ProfileProvider({ children }) {\n\tconst { logout, notifyProfileChanges } = useUsers();\n\tconst [roles, setRoles] = useState([]);\n\tconst [profile, setProfile] = useState();\n\tconst [credentialDataChanged, setCredentialDataChanged] = useState(false);\n\tconst [dataSaved, setDataSaved] = useState(false);\n\tconst [profileLoading, setProfileLoading] = useState(false);\n\tconst [errorMsg, setErrorMsg] = useState();\n\n\t// first loading\n\tuseMemo(() => {\n\t\tsetProfileLoading(true);\n\t\tlet token = sessionStorage.getItem('starbucks-admin-jwt');\n\t\tfetch(SERVER_URL + '/admin/role', {\n\t\t\theaders: { Authorization: token },\n\t\t})\n\t\t\t.then((response) => response.json())\n\t\t\t.then(setRoles)\n\t\t\t.then(() => {\n\t\t\t\tlet username = JSON.parse(sessionStorage.getItem('starbucks-admin')).username;\n\t\t\t\tfetch(SERVER_URL + `/user/username=${username}`, {\n\t\t\t\t\theaders: { Authorization: token },\n\t\t\t\t})\n\t\t\t\t\t.then((response) => response.json())\n\t\t\t\t\t.then(setProfile)\n\t\t\t\t\t.then(() => setProfileLoading(false));\n\t\t\t});\n\t}, []);\n\n\tconst isCredentialDataChanged = (fieldName, value) => {\n\t\tlet user = JSON.parse(sessionStorage.getItem('starbucks-admin'));\n\t\tif (value !== user[fieldName]) {\n\t\t\treturn true;\n\t\t} else {\n\t\t\treturn false;\n\t\t}\n\t};\n\n\tconst handleChange = (fieldName, value) => {\n\t\tsetProfile({ ...profile, [fieldName]: value });\n\t\tif (fieldName === 'username' || fieldName === 'password' || fieldName === 'role') {\n\t\t\tsetCredentialDataChanged(isCredentialDataChanged(fieldName, value));\n\t\t}\n\t};\n\n\tconst updateUser = (user) => {\n\t\tsetProfileLoading(true);\n\t\tlet token = sessionStorage.getItem('starbucks-admin-jwt');\n\t\tfetch(SERVER_URL + `/admin/user/${user.id}`, {\n\t\t\tmethod: 'PUT',\n\t\t\theaders: {\n\t\t\t\t'Content-Type': 'application/json',\n\t\t\t\tAuthorization: token,\n\t\t\t},\n\t\t\tbody: JSON.stringify(user),\n\t\t})\n\t\t\t.then((response) => {\n\t\t\t\t// 403 forbidden (validation); 409 conflict (unique)\n\t\t\t\tif (response.status === 403 || response.status === 409) {\n\t\t\t\t\treturn response.text();\n\t\t\t\t} else {\n\t\t\t\t\t// for updating new current user to the outside (photo and fullname displayed in the side menu)\n\t\t\t\t\tsessionStorage.setItem('starbucks-admin', JSON.stringify(user));\n\t\t\t\t}\n\t\t\t})\n\t\t\t.then(setErrorMsg)\n\t\t\t.then(() => setDataSaved(true))\n\t\t\t.then(() => setProfileLoading(false));\n\t};\n\n\tconst setErrorMsgContent = (value) => {\n\t\tsetErrorMsg(value); // set message content or we can set back to undefined (no errors)\n\t};\n\n\tuseEffect(() => {\n\t\tif (dataSaved && errorMsg === undefined) {\n\t\t\tif (credentialDataChanged) {\n\t\t\t\tlogout();\n\t\t\t} else {\n\t\t\t\tnotifyProfileChanges(true); // notify the outside (current user on the header) to get new current user from session storage\n\t\t\t}\n\t\t}\n\t}, [credentialDataChanged, dataSaved, errorMsg, logout, notifyProfileChanges]);\n\n\tuseEffect(() => {\n\t\tif (dataSaved) {\n\t\t\tsetDataSaved(false); // set back to 'false'\n\t\t}\n\t}, [dataSaved]);\n\n\treturn (\n\t\t<ProfileContext.Provider value={{ roles, profile, handleChange, updateUser, profileLoading, errorMsg, setErrorMsgContent }}>\n\t\t\t{children}\n\t\t</ProfileContext.Provider>\n\t);\n}\n\nexport default ProfileProvider;\n"]},"metadata":{},"sourceType":"module"}