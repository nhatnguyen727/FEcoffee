{"ast":null,"code":"var _jsxFileName = \"/home/nhatnt/TN/FEcoffee/src/client/components/app-context/OrderHistoryProvider.jsx\",\n    _s = $RefreshSig$(),\n    _s2 = $RefreshSig$();\n\nimport { useContext, createContext, useState, useMemo } from 'react';\nimport { SERVER_URL } from '../../constants';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst OrderHistoryContext = /*#__PURE__*/createContext();\nexport const useOrderHistory = () => {\n  _s();\n\n  return useContext(OrderHistoryContext);\n};\n\n_s(useOrderHistory, \"gDsCjeeItUuvgOWf1v4qoK9RF6k=\");\n\nfunction OrderHistoryProvider({\n  children\n}) {\n  _s2();\n\n  const [orders, setOrders] = useState([]);\n  const [orderLoading, setOrderLoading] = useState(true); // 'true' for first loading in 'useEffect'\n\n  useMemo(() => {\n    if (sessionStorage.getItem('starbucks-member') === null) {\n      return;\n    }\n\n    let token = sessionStorage.getItem('starbucks-jwt');\n    let userId = JSON.parse(sessionStorage.getItem('starbucks-member')).id;\n    setOrderLoading(true);\n    fetch(SERVER_URL + `/order/user=${userId}`, {\n      headers: {\n        Authorization: token\n      }\n    }).then(response => response.json()).then(setOrders).then(() => setOrderLoading(false));\n  }, []);\n  return /*#__PURE__*/_jsxDEV(OrderHistoryContext.Provider, {\n    value: {\n      orders,\n      orderLoading\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 27,\n    columnNumber: 9\n  }, this);\n}\n\n_s2(OrderHistoryProvider, \"3NMPQzitA+l8rEKaI5u9V4mbyS4=\");\n\n_c = OrderHistoryProvider;\nexport default OrderHistoryProvider;\n\nvar _c;\n\n$RefreshReg$(_c, \"OrderHistoryProvider\");","map":{"version":3,"sources":["/home/nhatnt/TN/FEcoffee/src/client/components/app-context/OrderHistoryProvider.jsx"],"names":["useContext","createContext","useState","useMemo","SERVER_URL","OrderHistoryContext","useOrderHistory","OrderHistoryProvider","children","orders","setOrders","orderLoading","setOrderLoading","sessionStorage","getItem","token","userId","JSON","parse","id","fetch","headers","Authorization","then","response","json"],"mappings":";;;;AAAA,SAASA,UAAT,EAAqBC,aAArB,EAAoCC,QAApC,EAA8CC,OAA9C,QAA6D,OAA7D;AACA,SAASC,UAAT,QAA2B,iBAA3B;;AAEA,MAAMC,mBAAmB,gBAAGJ,aAAa,EAAzC;AAEA,OAAO,MAAMK,eAAe,GAAG;AAAA;;AAAA,SAAMN,UAAU,CAACK,mBAAD,CAAhB;AAAA,CAAxB;;GAAMC,e;;AAEb,SAASC,oBAAT,CAA8B;AAAEC,EAAAA;AAAF,CAA9B,EAA4C;AAAA;;AAC3C,QAAM,CAACC,MAAD,EAASC,SAAT,IAAsBR,QAAQ,CAAC,EAAD,CAApC;AACA,QAAM,CAACS,YAAD,EAAeC,eAAf,IAAkCV,QAAQ,CAAC,IAAD,CAAhD,CAF2C,CAEa;;AAExDC,EAAAA,OAAO,CAAC,MAAM;AACb,QAAIU,cAAc,CAACC,OAAf,CAAuB,kBAAvB,MAA+C,IAAnD,EAAyD;AACxD;AACA;;AACD,QAAIC,KAAK,GAAGF,cAAc,CAACC,OAAf,CAAuB,eAAvB,CAAZ;AACA,QAAIE,MAAM,GAAGC,IAAI,CAACC,KAAL,CAAWL,cAAc,CAACC,OAAf,CAAuB,kBAAvB,CAAX,EAAuDK,EAApE;AACAP,IAAAA,eAAe,CAAC,IAAD,CAAf;AACAQ,IAAAA,KAAK,CAAChB,UAAU,GAAI,eAAcY,MAAO,EAApC,EAAuC;AAC3CK,MAAAA,OAAO,EAAE;AAAEC,QAAAA,aAAa,EAAEP;AAAjB;AADkC,KAAvC,CAAL,CAGEQ,IAHF,CAGQC,QAAD,IAAcA,QAAQ,CAACC,IAAT,EAHrB,EAIEF,IAJF,CAIOb,SAJP,EAKEa,IALF,CAKO,MAAMX,eAAe,CAAC,KAAD,CAL5B;AAMA,GAbM,EAaJ,EAbI,CAAP;AAeA,sBAAO,QAAC,mBAAD,CAAqB,QAArB;AAA8B,IAAA,KAAK,EAAE;AAAEH,MAAAA,MAAF;AAAUE,MAAAA;AAAV,KAArC;AAAA,cAAgEH;AAAhE;AAAA;AAAA;AAAA;AAAA,UAAP;AACA;;IApBQD,oB;;KAAAA,oB;AAsBT,eAAeA,oBAAf","sourcesContent":["import { useContext, createContext, useState, useMemo } from 'react';\nimport { SERVER_URL } from '../../constants';\n\nconst OrderHistoryContext = createContext();\n\nexport const useOrderHistory = () => useContext(OrderHistoryContext);\n\nfunction OrderHistoryProvider({ children }) {\n\tconst [orders, setOrders] = useState([]);\n\tconst [orderLoading, setOrderLoading] = useState(true); // 'true' for first loading in 'useEffect'\n\n\tuseMemo(() => {\n\t\tif (sessionStorage.getItem('starbucks-member') === null) {\n\t\t\treturn;\n\t\t}\n\t\tlet token = sessionStorage.getItem('starbucks-jwt');\n\t\tlet userId = JSON.parse(sessionStorage.getItem('starbucks-member')).id;\n\t\tsetOrderLoading(true);\n\t\tfetch(SERVER_URL + `/order/user=${userId}`, {\n\t\t\theaders: { Authorization: token },\n\t\t})\n\t\t\t.then((response) => response.json())\n\t\t\t.then(setOrders)\n\t\t\t.then(() => setOrderLoading(false));\n\t}, []);\n\n\treturn <OrderHistoryContext.Provider value={{ orders, orderLoading }}>{children}</OrderHistoryContext.Provider>;\n}\n\nexport default OrderHistoryProvider;\n"]},"metadata":{},"sourceType":"module"}